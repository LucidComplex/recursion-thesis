
@article{benander_recursion_1996,
	title = {Recursion vs. {Iteration}: {An} {Empirical} {Study} of {Comprehension}},
	volume = {32},
	issn = {0164-1212},
	shorttitle = {Recursion vs. {Iteration}},
	url = {http://dx.doi.org/10.1016/0164-1212(95)00043-7},
	doi = {10.1016/0164-1212(95)00043-7},
	number = {1},
	urldate = {2016-12-23},
	journal = {J. Syst. Softw.},
	author = {Benander, Alan C. and Benander, Barbara A. and Pu, Howard},
	month = jan,
	year = {1996},
	keywords = {already\_read},
	pages = {73--82},
	file = {McCauley et al_2015_Recursion vs.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/BHPJEUWP/McCauley et al_2015_Recursion vs.pdf:application/pdf}
}

@inproceedings{gunion_curing_2009,
	title = {Curing recursion aversion},
	volume = {41},
	url = {http://dl.acm.org/citation.cfm?id=1562919},
	urldate = {2016-12-23},
	booktitle = {{ACM} {SIGCSE} {Bulletin}},
	publisher = {ACM},
	author = {Gunion, Katherine and Milford, Todd and Stege, Ulrike},
	year = {2009},
	keywords = {already\_read},
	pages = {124--128},
	file = {Gunion et al_2009_Curing recursion aversion.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/5Q43G5PN/Gunion et al_2009_Curing recursion aversion.pdf:application/pdf;Snapshot:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/HSJSA87C/citation.html:text/html}
}

@inproceedings{lewis_exploring_2014,
	address = {New York, NY, USA},
	series = {{ICER} '14},
	title = {Exploring {Variation} in {Students}' {Correct} {Traces} of {Linear} {Recursion}},
	isbn = {978-1-4503-2755-8},
	url = {http://doi.acm.org/10.1145/2632320.2632355},
	doi = {10.1145/2632320.2632355},
	abstract = {There has been a wealth of education research focused on recursion. This research has documented students' persistent difficulties with recursion, a variety of pedagogical approaches, and students' correct and incorrect mental models of recursion. This paper explores the variation in students' successful attempts to trace linear recursion. The findings go beyond correct and incorrect mental models to show how each of four modes of tracing linear recursion may require or facilitate a particular understanding of recursion. Additionally, the current study shows how knowledge of algebraic substitution can be applied to tracing linear recursion, and identifies a potential difficulty in students transferring this knowledge.},
	urldate = {2016-12-12},
	booktitle = {Proceedings of the {Tenth} {Annual} {Conference} on {International} {Computing} {Education} {Research}},
	publisher = {ACM},
	author = {Lewis, Colleen M.},
	year = {2014},
	keywords = {already\_read, mental models, recursion, representations, transfer},
	pages = {67--74},
	file = {Lewis_2014_Exploring Variation in Students' Correct Traces of Linear Recursion.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/VZ78WITV/Lewis_2014_Exploring Variation in Students' Correct Traces of Linear Recursion.pdf:application/pdf}
}

@article{mccauley_teaching_2015,
	title = {Teaching and learning recursive programming: a review of the research literature},
	volume = {25},
	issn = {0899-3408},
	shorttitle = {Teaching and learning recursive programming},
	url = {http://dx.doi.org/10.1080/08993408.2015.1033205},
	doi = {10.1080/08993408.2015.1033205},
	abstract = {Hundreds of articles have been published on the topics of teaching and learning recursion, yet fewer than 50 of them have published research results. This article surveys the computing education research literature and presents findings on challenges students encounter in learning recursion, mental models students develop as they learn recursion, and best practices in introducing recursion. Effective strategies for introducing the topic include using different contexts such as recurrence relations, programming examples, fractal images, and a description of how recursive methods are processed using a call stack. Several studies compared the efficacy of introducing iteration before recursion and vice versa. The paper concludes with suggestions for future research into how students learn and understand recursion, including a look at the possible impact of instructor attitude and newer pedagogies.},
	number = {1},
	urldate = {2017-01-04},
	journal = {Computer Science Education},
	author = {McCauley, Ren√©e and Grissom, Scott and Fitzgerald, Sue and Murphy, Laurie},
	month = jan,
	year = {2015},
	keywords = {already\_read, learning, mental models, pedagogy, programming, recursion, research, student misconceptions, teaching},
	pages = {37--66},
	file = {McCauley et al_2015_Teaching and learning recursive programming.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/IUSKP4JC/McCauley et al_2015_Teaching and learning recursive programming.pdf:application/pdf;Snapshot:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/ZS8BI3AQ/08993408.2015.html:text/html}
}

@inproceedings{mccauley_recursion_2015,
	address = {New York, NY, USA},
	series = {{SIGCSE} '15},
	title = {Recursion vs. {Iteration}: {An} {Empirical} {Study} of {Comprehension} {Revisited}},
	isbn = {978-1-4503-2966-8},
	shorttitle = {Recursion vs. {Iteration}},
	url = {http://doi.acm.org/10.1145/2676723.2677227},
	doi = {10.1145/2676723.2677227},
	abstract = {This study compares differences in students' ability to comprehend recursive and iterative programs by replicating a 1996 study. These studies are interesting for the following reasons: (1) there have been few studies on the comprehension of recursive programs, (2) there have been few studies of recursion that involve the use of data structures, (3) subjects were asked to read and comprehend code that manipulated linked lists recursively. In a 1996 study, subjects found a recursive version of a linked list search function easier to comprehend than an iterative version. The results of this study contradict these earlier findings; subjects in this study were equally likely to correctly describe the purpose of the search algorithm, regardless of iterative or recursive implementation. Consistent with the findings in the 1996 study, subjects in this study were more likely to correctly describe the copy task using the iterative version of this problem rather than the recursive version. Subjects who correctly described the purpose of the copy method wrote abstract summaries. Many of the subjects who did not recognize the purpose of the code, and who answered incorrectly, provided a line-by-line (partial) trace of the code. While revealing some understanding of the execution of the code, these subjects were generally not able to see the forest for the trees.},
	urldate = {2016-12-12},
	booktitle = {Proceedings of the 46th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {ACM},
	author = {McCauley, Renee and Hanks, Brian and Fitzgerald, Sue and Murphy, Laurie},
	year = {2015},
	keywords = {already\_read, computer science education research, CS2, iteration, linked lists, programming, recursion},
	pages = {350--355},
	file = {McCauley et al_2015_Recursion vs.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/PIV56B8H/McCauley et al_2015_Recursion vs.pdf:application/pdf}
}

@inproceedings{mirolo_learning_2010,
	title = {Learning (through) recursion: a multidimensional analysis of the competences achieved by {CS}1 students},
	shorttitle = {Learning (through) recursion},
	url = {http://dl.acm.org/citation.cfm?id=1822136},
	urldate = {2016-12-22},
	booktitle = {Proceedings of the fifteenth annual conference on {Innovation} and technology in computer science education},
	publisher = {ACM},
	author = {Mirolo, Claudio},
	year = {2010},
	keywords = {already\_read},
	pages = {160--164},
	file = {Mirolo_2010_Learning (through) recursion.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/6V7M2TQQ/Mirolo_2010_Learning (through) recursion.pdf:application/pdf;Snapshot:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/S5F87CWP/citation.html:text/html}
}

@inproceedings{mirolo_is_2011,
	address = {New York, NY, USA},
	series = {{ITiCSE} '11},
	title = {Is {Iteration} {Really} {Easier} to {Master} {Than} {Recursion}: {An} {Investigation} in a {Functional}-first {CS}1 {Context}},
	isbn = {978-1-4503-0697-3},
	shorttitle = {Is {Iteration} {Really} {Easier} to {Master} {Than} {Recursion}},
	url = {http://doi.acm.org/10.1145/1999747.1999876},
	doi = {10.1145/1999747.1999876},
	abstract = {Despite a general consensus on the difficulties faced to master recursion, a two-year investigation on the achievements in a 'functional-first' introductory course does not corroborate the hypothesis that students are more at ease with iteration than they are with recursion.},
	urldate = {2016-12-12},
	booktitle = {Proceedings of the 16th {Annual} {Joint} {Conference} on {Innovation} and {Technology} in {Computer} {Science} {Education}},
	publisher = {ACM},
	author = {Mirolo, Claudio},
	year = {2011},
	keywords = {already\_read, iteration, programming learning, recursion},
	pages = {362--362},
	file = {Mirolo_2011_Is Iteration Really Easier to Master Than Recursion.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/K9SCHB8H/Mirolo_2011_Is Iteration Really Easier to Master Than Recursion.pdf:application/pdf}
}

@inproceedings{mirolo_is_2012,
	address = {New York, NY, USA},
	series = {{ICER} '12},
	title = {Is {Iteration} {Really} {Easier} to {Learn} {Than} {Recursion} for {CS}1 {Students}?},
	isbn = {978-1-4503-1604-0},
	url = {http://doi.acm.org/10.1145/2361276.2361296},
	doi = {10.1145/2361276.2361296},
	abstract = {There is general consensus that recursion is difficult to learn, which may be meant to imply that novice students are more at ease with iteration --- probably a widespread perception of students themselves. However, three years of investigation in a context where recursion is introduced earlier than iteration, as well as control experiments for a standard imperative-first introduction to programming, have provided no evidence that students make more progress with iteration than they do with recursion. More specifically, by means of a pair of questionnaires devised for this purpose, two research questions have been addressed. First, do the students who learned recursion before iteration actually exhibit a stronger ability to deal with the latter? Second, do the students of the imperative-first path master iteration better than those of the recursion-earlier path?},
	urldate = {2016-12-12},
	booktitle = {Proceedings of the {Ninth} {Annual} {International} {Conference} on {International} {Computing} {Education} {Research}},
	publisher = {ACM},
	author = {Mirolo, Claudio},
	year = {2012},
	keywords = {already\_read, CS1, iteration, novices, programming learning, recursion},
	pages = {99--104},
	file = {Mirolo_2012_Is Iteration Really Easier to Learn Than Recursion for CS1 Students.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/QZCAAB7P/Mirolo_2012_Is Iteration Really Easier to Learn Than Recursion for CS1 Students.pdf:application/pdf}
}

@inproceedings{murphy_bug_2015,
	address = {New York, NY, USA},
	series = {{SIGCSE} '15},
	title = {Bug {Infestation}!: {A} {Goal}-{Plan} {Analysis} of {CS}2 {Students}' {Recursive} {Binary} {Tree} {Solutions}},
	isbn = {978-1-4503-2966-8},
	shorttitle = {Bug {Infestation}!},
	url = {http://doi.acm.org/10.1145/2676723.2677232},
	doi = {10.1145/2676723.2677232},
	abstract = {A goal-plan analysis was conducted to examine the variety of plans students use in writing a recursive method for an operation on a binary search tree. Students were asked to write a recursive method to count the nodes in a binary search tree with exactly one child. The problem incorporated two goals: traversing the tree and counting nodes with one child. Three traversal plans and four counting plans were observed in student solutions. Over half of the students used the arm's-length recursion plan, which involves testing for the base case before it is actually reached in order to avoid making recursive calls. This strategy creates complex and error prone code. Making students aware of arm's-length recursion may help them avoid introducing bugs into their recursive code. Although nearly all of the 18 participants demonstrated viable plans for solving the problem, their solutions contained a variety of errors: 55 total errors of 15 types. Students had particular difficulty with base cases, misplaced calculations, and missing method calls. Knowledge of these errors can be useful for instructors when developing lecture examples, identifying distractors for peer instruction multiple-choice questions and for designing homework exercises. Instructors can counteract these problems by providing a variety of recursive examples.},
	urldate = {2017-01-04},
	booktitle = {Proceedings of the 46th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {ACM},
	author = {Murphy, Laurie and Fitzgerald, Sue and Grissom, Scott and McCauley, Ren√©e},
	year = {2015},
	keywords = {already\_read, arm's-length recursion, binary search trees, bst, computer science education research, CS2, data structures, recursion},
	pages = {482--487},
	file = {Murphy et al_2015_Bug Infestation.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/K6HG989G/Murphy et al_2015_Bug Infestation.pdf:application/pdf}
}

@article{pirolli_role_1985,
	title = {The role of learning from examples in the acquisition of recursive programming skills},
	volume = {39},
	copyright = {(c) 2016 APA, all rights reserved},
	issn = {0008-4255},
	doi = {10.1037/h0080061},
	abstract = {Presents an analysis and simulation model of the verbal protocols of 2 college students and 1 8-yr-old S learning to program recursive functions. The model is formalized as a production system capable of acquiring new production rules based on problem-solving experience. The model and protocols suggest that (a) problem solving by analogy to worked-out examples is frequent in initial attempts by novices to write recursive functions; (b) different representations of examples are used to guide problem solving by analogy; and (c) performance on later problems reflects the particular representations used in problem solving by analogy on earlier problems. The protocols and simulations also suggest that learning is facilitated by using abstract representations of the structure of recursion examples to guide initial coding attempts. (French abstract) (25 ref)},
	language = {English},
	number = {2},
	journal = {Canadian Journal of Psychology/Revue canadienne de psychologie},
	author = {Pirolli, Peter L. and Anderson, John R.},
	year = {1985},
	keywords = {*Computer Programming Languages, *Imitation (Learning), *Problem Solving, *Skill Learning, already\_read, Models},
	pages = {240--272},
	file = {Pirolli_Anderson_1985_The role of learning from examples in the acquisition of recursive programming.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/BJ7PEZPU/Pirolli_Anderson_1985_The role of learning from examples in the acquisition of recursive programming.pdf:application/pdf}
}

@article{ramsey_teaching_2014,
	title = {On teaching* how to design programs*: observations from a newcomer},
	volume = {49},
	shorttitle = {On teaching* how to design programs*},
	url = {http://dl.acm.org/citation.cfm?id=2628137},
	number = {9},
	urldate = {2016-12-08},
	journal = {ACM SIGPLAN Notices},
	author = {Ramsey, Norman},
	year = {2014},
	keywords = {already\_read},
	pages = {153--166},
	file = {Ramsey_2014_On teaching how to design programs.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/3DQGEKR4/Ramsey_2014_On teaching how to design programs.pdf:application/pdf;Snapshot:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/8CSPBQRA/citation.html:text/html}
}

@article{turbak_teaching_1999,
	title = {Teaching recursion before loops in {CS}1},
	volume = {14},
	url = {http://cs.wellesley.edu/~fturbak/pubs/jcsc99.pdf},
	number = {4},
	urldate = {2016-12-20},
	journal = {Journal of Computing in Small Colleges},
	author = {Turbak, Franklyn and Royden, Constance and Stephan, Jennifer and Herbst, Jean},
	year = {1999},
	keywords = {already\_read},
	pages = {86--101},
	file = {Turbak et al_1999_Teaching recursion before loops in CS1.pdf:/home/tan/.zotero/zotero/5w5ybo8y.default/zotero/storage/2GKZE7C2/Turbak et al_1999_Teaching recursion before loops in CS1.pdf:application/pdf}
}
